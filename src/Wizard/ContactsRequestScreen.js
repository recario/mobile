import React from 'react';
import { connect } from 'react-redux';
import { Platform, StyleSheet, SafeAreaView } from 'react-native';
import PropTypes from 'prop-types';
import { Container, Content, Text, Button, H1, View, Icon } from 'native-base';

import { PERMISSIONS, RESULTS, request } from 'react-native-permissions';

import { setWizardDone } from '../actions/sessionsActions';

import { activeColor, lightColor, darkColor } from '../Colors';

class ContactsRequestScreen extends React.PureComponent {
  goTo = () => {
    const { setWizardDone } = this.props;

    if (Platform.OS == 'ios') {
      this.props.navigation.navigate('NotificationsRequestScreen');
    } else {
      setWizardDone();
    }
  };

  requestContacts = () => {
    var permName = Platform.select({
      android: PERMISSIONS.ANDROID.READ_CONTACTS,
      ios: PERMISSIONS.IOS.CONTACTS,
    });
    return request(permName).then((status) => {
      this.goTo();
    });
  };

  render() {
    return (
      <SafeAreaView style={styles.safeAreaView}>
        <Container>
          <Icon name="people-circle-outline" style={styles.icon} />
          <Content contentContainerStyle={styles.contentContainer}>
            <H1 style={styles.h1}>–ü–æ—Å—Ç—Ä–æ–π—Ç–µ —Å–≤–æ—é —Å–µ—Ç—å –¥—Ä—É–∑–µ–π –≤ –†–µ–∫–∞—Ä–∏–æ</H1>

            <View style={styles.mainContainer}>
              <Text style={styles.textBlock}>
                –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏ —Å –†–µ–∫–∞—Ä–∏–æ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –≤—Å–µ—Ö –¥—Ä—É–∑–µ–π –∏ –∑–Ω–∞–∫–æ–º—ã—Ö, –∫—Ç–æ –ø—Ä–æ–¥–∞–µ—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—å –∏–ª–∏ –∑–Ω–∞–µ—Ç
                –ø—Ä–æ–¥–∞–≤—Ü–∞ üåÄ
              </Text>
              <Text style={styles.textBlock}>
                –ö–æ–Ω—Ç–∞–∫—Ç—ã –±—É–¥—É—Ç –ø–æ–¥ –∑–∞—â–∏—Ç–æ–π, –Ω–∏–∫—Ç–æ, –∫—Ä–æ–º–µ –≤–∞—à–∏—Ö –¥—Ä—É–∑–µ–π –Ω–µ —É–∑–Ω–∞–µ—Ç, –∫—Ç–æ —Ç–∞–º –µ—Å—Ç—å. –ò —Å–æ–≤—Å–µ–º –Ω–∏–∫—Ç–æ –Ω–µ —É–∑–Ω–∞–µ—Ç,
                –ø–æ–¥ –∫–∞–∫–∏–º –∏–º–µ–Ω–µ–º –æ–Ω –∑–∞–ø–∏—Å–∞–Ω ü§´
              </Text>
              <Text style={styles.textBlock}>
                –í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –º–æ–∂–Ω–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã —Å —Å–µ—Ä–≤–µ—Ä–æ–≤ –†–µ–∫–∞—Ä–∏–æ ‚úÖ
              </Text>
            </View>

            <Button block dark onPress={this.requestContacts} style={styles.goButton}>
              <Text>–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø</Text>
            </Button>
            <Button transparent block onPress={this.goTo} style={styles.skipButton}>
              <Text style={styles.mainColor}>–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å</Text>
            </Button>
          </Content>
        </Container>
      </SafeAreaView>
    );
  }
}

function mapStateToProps(state) {
  return {};
}

function mapDispatchToProps(dispatch) {
  return {
    setWizardDone: () => dispatch(setWizardDone()),
  };
}

export default connect(mapStateToProps, mapDispatchToProps)(ContactsRequestScreen);

ContactsRequestScreen.propTypes = {};

const styles = StyleSheet.create({
  h1: {
    padding: 24,
    textAlign: 'center',
  },
  mainContainer: {
    justifyContent: 'center',
    flex: 1,
    paddingLeft: 24,
    paddingRight: 24,
  },
  textBlock: {
    marginBottom: 24,
  },
  mainColor: {
    color: lightColor,
  },
  skipButton: {
    margin: 24,
    marginTop: 0,
    marginBottom: 48,
  },
  goButton: {
    backgroundColor: activeColor,
    marginLeft: 24,
    marginRight: 24,
    marginBottom: 12,
  },
  contentContainer: {
    justifyContent: 'space-between',
    flex: 1,
  },
  safeAreaView: {
    flex: 1,
    backgroundColor: darkColor,
  },
  icon: {
    alignSelf: 'center',
    color: activeColor,
    fontSize: 48,
  },
});
